#!/usr/bin/env node
var _ = require('lodash');
var Promise = require('bluebird');
var chalk = require('chalk');
var exec = require('child_process').exec;
var fs = require('fs');
var program = require('commander');
var util = require('util');
Promise.promisifyAll(fs);

//var haxelibPath = '/Users/awhite/dev/HaxeFoundation/haxelib/haxelib_script.sh';
var haxelibPath = '/Users/awhite/bin/haxelibd';

function parseArguments() {
  program.parse(process.argv);
  if (process.argv.length < 3) {
    program.help();
  }
}

function install() {
  ensureLocalHaxelibRepository()
    .then(readLocalHmmJson)
    .then(function(data) {
      var libraryNames = _.keys(data.dependencies);
      return Promise.map(libraryNames, function(libraryName) {
        return installLibrary(libraryName, data.dependencies[libraryName]);
      }, { concurrency: 1 });
    })
    .all(function() {
      console.log('done');
    })
    .catch(onError);
}

function installLibrary(name, data) {
  console.log(chalk.green('Installing ' + name + '...'));
  if (data.type === 'haxelib') {
    data.version = data.version || "";
    return system('%s --debug install %s %s', haxelibPath, name, data.version);
  } else if (data.type === 'git') {
    data.ref = data.ref || 'master';
    data.dir = data.dir || '';
    return system('%s --debug git %s %s %s %s', haxelibPath, name, data.url, data.ref, data.dir);
  }
}

function update() {
  //console.log('update', arguments);
}

function readLocalHmmJson() {
  return fs.readFileAsync('./hmm.json', 'utf-8')
    .then(JSON.parse);
}

function ensureLocalHaxelibRepository() {
  // TODO check if .haxelib directory exists and is directory
  return fs.statAsync('.haxelib')
    .then(function(stats) {
      if (stats.isDirectory()) {
        return;
      }
      return system('%s newrepo', haxelibPath);
    });
}

function system(command) {
  if (arguments.length > 1) {
    command = util.format.apply(null, arguments);
  }
  console.log(chalk.yellow(command));
  return new Promise(function(resolve, reject) {
    exec(command, function(error, stdout, stderr) {
      if (error) {
        reject(error);
        return;
      }
      console.log(stdout, stderr);
      resolve({
        stdout: stdout,
        stderr: stderr
      });
    });
  });
}

function onError(error) {
  console.error(chalk.red('Error'));
  console.error(error);
  process.exit(1);
}

program
  .version('0.0.1');

program
  .command('install')
  .description('install libraries specified in hmm.json')
  .action(install);

program
  .command('update')
  .description('update libraries specified in hmm.json')
  .action(update);

program
  .command('*')
  .action(function() {
    program.help();
  });

parseArguments();
